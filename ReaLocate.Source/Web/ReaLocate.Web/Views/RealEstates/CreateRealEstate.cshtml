@model ReaLocate.Web.ViewModels.CreateRealEstateViewModel

@{
    ViewBag.Title = "CreateRealEstate";
}

<h2>Create Real Estate</h2>
<div id="type-selector" class="controls" style="display:none">
    <input type="radio" name="type" id="changetype-address" checked="checked">
</div>
<div style="height:800px">
    <div id="map"></div>
    @using (Html.BeginForm("CreateRealEstate", "RealEstates", FormMethod.Post, new { role = "form", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>RealEstateViewModel</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                <div class="form-group" id="address-holder">
                    @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", @id = "pac-input" } })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.OfferType, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.OfferType, new SelectList(
                  new List<Object>{
                       new { value = 0 , text = "Regular"  },
                       new { value = 1 , text = "Gold" },
                    }, "value", "text", 0))
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.RealEstateType, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.RealEstateType, new SelectList(
                  new List<Object>{
                       new { value = 0 , text = "For Rent"  },
                       new { value = 1 , text = "For Sale" },
                       new { value = 2 , text = "For Sale and For Sale" },
                    }, "value", "text", 0))
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                    </div>
                </div>
                @for (int i = 1; i <= this.ViewBag.MaxPhotos; i++)
                {
                    <div class="form-group">
                        @Html.Label("Photo", new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="file" id=@("Photo"+ i) name ="files"  class="very-special-file"/>
                        </div>
                    </div>
                }

                <br />

            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input id="submit-final" type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 42.6932, lng: 23.3354 },
                zoom: 16
            });

            var input = (document.getElementById('pac-input'));
            var types = document.getElementById('type-selector');
            var info = document.getElementById('estate-info');

            map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(info);

            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);

            var infowindow = new google.maps.InfoWindow();
            var marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });

            autocomplete.addListener('place_changed', function () {
                infowindow.close();
                marker.setVisible(false);
                var place = autocomplete.getPlace();
                console.log(place);

                if (!place.geometry) {
                    window.alert("No such place, please add correct address");
                    return;
                }

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    //map.setCenter(place.geometry.location);
                    map.setCenterWithOffset(place.geometry.location, 0, 0);//set offset
                    map.setZoom(17);  // Why 17? Because it looks good.
                }
                marker.setIcon(({
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(35, 35)
                }));
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);

                var address = '';
                if (place.address_components) {
                    address = [
                        (place.address_components[0] && place.address_components[0].short_name || ''),
                        (place.address_components[1] && place.address_components[1].short_name || ''),
                        (place.address_components[2] && place.address_components[2].short_name || '')
                    ].join(' ');
                }

                infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
                infowindow.open(map, marker);
            });

            // Sets a listener on a radio button to change the filter type on Places
            // Autocomplete.
            function setupClickListener(id, types) {
                var radioButton = document.getElementById(id);
                radioButton.addEventListener('click', function () {
                    autocomplete.setTypes(types);
                });
            }

            // set offset of the center
            google.maps.Map.prototype.setCenterWithOffset = function (latlng, offsetX, offsetY) {
                var map = this;
                var ov = new google.maps.OverlayView();
                ov.onAdd = function () {
                    var proj = this.getProjection();
                    var aPoint = proj.fromLatLngToContainerPixel(latlng);
                    aPoint.x = aPoint.x + offsetX;
                    aPoint.y = aPoint.y + offsetY;
                    map.setCenter(proj.fromContainerPixelToLatLng(aPoint));
                };
                ov.draw = function () { };
                ov.setMap(this);
            };

            setupClickListener('changetype-all', []);
            setupClickListener('changetype-address', ['address']);
            setupClickListener('changetype-establishment', ['establishment']);
            setupClickListener('changetype-geocode', ['geocode']);
        }

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD9tld7K2WnN4VSiW9l4g9P49nZGKvuHl4&signed_in=true&libraries=places&callback=initMap"
            async defer></script>
    <script>

        $("#submit-final").click(function (event) {
            alert("Handler  presubmit for  called.");

            if ($("form").validate().form()) {
                // valid, proceed with geocoding
                var geocoder = new google.maps.Geocoder();
                console.log("here");
                var address = $("#pac-input").val();
                geocoder.geocode({ 'address': address }, function (results, status) {
                    if (status == google.maps.GeocoderStatus.OK & address.length>5) {
                        console.log('hey is valid');
                        //$("#LatitudeLongitude").val(results[0].geometry.location);
                        $('form').submit();
                    }
                    else {
                        alert("Geocode was not successful for the following reason: " + status);

                    }
                })
            }
        });
    </script>

<script type="text/jscript">
        //get file size
        function GetFileSize(fileid) {
            try {
                var fileSize = 0;
                    fileSize = $(fileid)[0].files[0].size //size in kb
                    fileSize = fileSize / 1048576; //size in mb

                    console.log(fileSize);
                return fileSize;
            }
            catch (e) {
                alert("Error is :" + e);
            }
        }

        //get file path from client system
        function getNameFromPath(strFilepath) {
            var objRE = new RegExp(/([^\/\\]+)$/);
            var strName = objRE.exec(strFilepath);

            if (strName == null) {
                return null;
            }
            else {
                return strName[0];
            }
        }

        $(function () {


            $('.very-special-file').change(function () {
                    var idSelector = '#'+event.srcElement.id;
                    var file = getNameFromPath($(idSelector).val());
                    if (file != null) {
                        var extension = file.substr((file.lastIndexOf('.') + 1));
                        console.log(extension);
                        switch (extension) {
                            case 'jpg':
                                flag = true;
                                break;
                            default:
                                flag = false;
                        }
                    }
                    if (flag == false) {
                        alert('hey stupid only jpg allowed');
                        var idSelector = '#'+event.srcElement.id;
                        $(idSelector).val('');
                        console.log(currentFileInput);
                        console.log('mn sum tupa');

                        return false;
                    }
                    else {
                        console.log(event.srcElement.id);
                        var idSelector = '#'+event.srcElement.id;
                        var size = GetFileSize(idSelector);

                        if (size > 1) {
                            alert('hey stupid no more than 1 mb');
                            $($(idSelector)).val('');
                        }
                    }
                });

        });
</script>
}
