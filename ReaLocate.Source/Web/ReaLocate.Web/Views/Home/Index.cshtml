@model ReaLocate.Web.ViewModels.IndexMapAndGridViewModel

@{
    ViewBag.Title = "Index";
}
<script src="http://maps.google.com/maps/api/js?sensor=true" type="text/javascript"></script>

<!-- This css is to ensure that the google map contols (zoom bar etc) show and size correctly. -->
<style>
    #map_canvas img {
        max-width: none;
    }
</style>

<!-- This css is to give a nice big popup "info window" when a marker is clicked on the map -->
<style>
    .infoDiv {
        height: 200px;
        width: 300px;
        -webkit-user-select: none;
        background-color: white;
    }
</style>

<!-- This is the div that will contain the Google Map -->
<div id="map_canvas" style="height: 500px;"></div>



<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Estates.First().Address)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Estates.First().Country)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Estates.First().City)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Estates.First().Title)
        </th>
        <th>Details</th>
    </tr>

    @foreach (var item in Model.Estates)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Address)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Country)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.City)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @{
                    var redirect = "/RealEstates/RealEstateDetails/" + item.EncodedId;
                }
                <a href=@redirect>Details</a>
            </td>
        </tr>
        }
</table>
<nav>
    <ul class="pagination">
        @if (Model.CurrentPage > 1)
        {
            <li>
                <a href="/Home/Index/@(Model.CurrentPage-1)" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
        }
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            var className = string.Empty;
            if (Model.CurrentPage == i)
            {
                className = "active";
            }
            <li class="@className"><a href="/Home/Index/@(Model.CurrentPage+1)">@i</a></li>
        }
        @if (Model.CurrentPage < Model.TotalPages)
        {
            <li>
                <a href="/Beers/All/@(Model.CurrentPage+1)" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        }
    </ul>
</nav>

<!-- Enclose the Javascript in a "section" so that it is rendered in the correct order after scripts have been loaded etc -->
@section scripts {
    <section class="scripts">

        <script type="text/javascript">

    <!-- This code tells the browser to execute the "Initialize" method only when the complete document model has been loaded. -->
    $(document).ready(function () {
        Initialize();
    });

    // Where all the fun happens
    function Initialize() {

        // Google has tweaked their interface somewhat - this tells the api to use that new UI
        google.maps.visualRefresh = true;

        // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
        var mapOptions = {
            zoom: 3,
            center: { lat: 42.6932, lng: 23.3354 },
            mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
        };

        // This makes the div with id "map_canvas" a google map
        var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

        // This shows adding a simple pin "marker" - this happens to be the Tate Gallery in Liverpool!
        var myLatlng = new google.maps.LatLng(53.40091, -2.994464);

        var marker = new google.maps.Marker({
            position: myLatlng,
            map: map,
            title: 'Tate Gallery'
        });

        // You can make markers different colors...  google it up!
        marker.setIcon('http://maps.google.com/mapfiles/ms/icons/green-dot.png')

        // a sample list of JSON encoded data of places to visit in Liverpool, UK
        // you can either make up a JSON list server side, or call it from a controller using JSONResult
        var data = @Html.Raw(Json.Encode(Model.MapsCoordinates))
        console.log(data);
        // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins
        $.each(data, function (i, item) {
            console.log(item.GeoLong)
            var marker = new google.maps.Marker({
                'position': new google.maps.LatLng(item.GeoLat, item.GeoLong),
                'map': map,
                'title': item.Address
            });

            // Make the marker-pin blue!
            marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png')
            var redirectToDetails = "/RealEstates/RealEstateDetails/" + item.EncodedId;   
            // put in some information about each json object - in this case, the opening hours.
            var infowindow = new google.maps.InfoWindow({
                content: "<div class='infoDiv'><h2>" + item.Address + "</h2>" + "<div><h4><a href=" + redirectToDetails+">Details</a></h4></div></div>"
            });

            // finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
            google.maps.event.addListener(marker, 'click', function () {
                infowindow.open(map, marker);
            });

        })
    }


        </script>
    </section>
}
